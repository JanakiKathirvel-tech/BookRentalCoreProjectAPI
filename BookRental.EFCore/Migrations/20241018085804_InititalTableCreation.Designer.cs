// <auto-generated />
using System;
using BookRental.EFCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookRental.EFCore.Migrations
{
    [DbContext(typeof(BookRentalDBContext))]
    [Migration("20241018085804_InititalTableCreation")]
    partial class InititalTableCreation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookRentalAPI.Models.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<string>("ISDN")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("BookId");

                    b.HasIndex("GenreId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            Author = "F. Scott Fitzgerald",
                            GenreId = 1,
                            ISDN = "9780743273565",
                            IsAvailable = true,
                            Title = "The Great Gatsby"
                        },
                        new
                        {
                            BookId = 2,
                            Author = "Harper Lee",
                            GenreId = 1,
                            ISDN = "9780060935467",
                            IsAvailable = true,
                            Title = "To Kill a Mockingbird"
                        },
                        new
                        {
                            BookId = 3,
                            Author = "George Orwell",
                            GenreId = 2,
                            ISDN = "9780451524935",
                            IsAvailable = true,
                            Title = "1984"
                        },
                        new
                        {
                            BookId = 4,
                            Author = "Jane Austen",
                            GenreId = 3,
                            ISDN = "9780141199078",
                            IsAvailable = true,
                            Title = "Pride and Prejudice"
                        },
                        new
                        {
                            BookId = 5,
                            Author = "J.D. Salinger",
                            GenreId = 1,
                            ISDN = "9780316769488",
                            IsAvailable = true,
                            Title = "The Catcher in the Rye"
                        },
                        new
                        {
                            BookId = 6,
                            Author = "J.R.R. Tolkien",
                            GenreId = 4,
                            ISDN = "9780547928227",
                            IsAvailable = true,
                            Title = "The Hobbit"
                        },
                        new
                        {
                            BookId = 7,
                            Author = "Ray Bradbury",
                            GenreId = 5,
                            ISDN = "9781451673319",
                            IsAvailable = true,
                            Title = "Fahrenheit 451"
                        },
                        new
                        {
                            BookId = 8,
                            Author = "Markus Zusak",
                            GenreId = 6,
                            ISDN = "9780375842207",
                            IsAvailable = true,
                            Title = "The Book Thief"
                        },
                        new
                        {
                            BookId = 9,
                            Author = "Herman Melville",
                            GenreId = 1,
                            ISDN = "9781503280786",
                            IsAvailable = true,
                            Title = "Moby-Dick"
                        },
                        new
                        {
                            BookId = 10,
                            Author = "Leo Tolstoy",
                            GenreId = 6,
                            ISDN = "9781400079988",
                            IsAvailable = true,
                            Title = "War and Peace"
                        });
                });

            modelBuilder.Entity("BookRentalAPI.Models.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenreId"));

                    b.Property<string>("GenreName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("GenreId");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            GenreId = 1,
                            GenreName = "Classics"
                        },
                        new
                        {
                            GenreId = 2,
                            GenreName = "Dystopian"
                        },
                        new
                        {
                            GenreId = 3,
                            GenreName = "Romance"
                        },
                        new
                        {
                            GenreId = 4,
                            GenreName = "Fantasy"
                        },
                        new
                        {
                            GenreId = 5,
                            GenreName = "Science Fiction"
                        },
                        new
                        {
                            GenreId = 6,
                            GenreName = "Historical Fiction"
                        });
                });

            modelBuilder.Entity("BookRentalAPI.Models.Rental", b =>
                {
                    b.Property<int>("RentalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RentalId"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<bool>("IsOverdue")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RentalDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RentalId");

                    b.HasIndex("BookId");

                    b.ToTable("Rentals");
                });

            modelBuilder.Entity("BookRentalAPI.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Name = "JOHN",
                            UserEmail = "John@gmail.com"
                        },
                        new
                        {
                            UserId = 2,
                            Name = "Mike",
                            UserEmail = "Janaki.kv2@gmail.com"
                        },
                        new
                        {
                            UserId = 3,
                            Name = "LASSE",
                            UserEmail = "Lasse@gmail.com"
                        },
                        new
                        {
                            UserId = 4,
                            Name = "EMIL",
                            UserEmail = "Email@gmail.com"
                        },
                        new
                        {
                            UserId = 5,
                            Name = "KARTSON",
                            UserEmail = "Karston@gmail.com"
                        });
                });

            modelBuilder.Entity("BookRentalAPI.Models.Book", b =>
                {
                    b.HasOne("BookRentalAPI.Models.Genre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("BookRentalAPI.Models.Rental", b =>
                {
                    b.HasOne("BookRentalAPI.Models.Book", "Book")
                        .WithMany("Rentals")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("BookRentalAPI.Models.Book", b =>
                {
                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("BookRentalAPI.Models.Genre", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
